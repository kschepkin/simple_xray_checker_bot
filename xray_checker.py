import os
import asyncio
import aiohttp
import logging
from datetime import datetime
from typing import Dict, Tuple
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.callback_data import CallbackData

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –≤ stdout
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()  # –¢–æ–ª—å–∫–æ –≤ stdout
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', 5))

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ .env
def load_servers() -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    servers = {}
    for key, value in os.environ.items():
        if key not in ['TELEGRAM_BOT_TOKEN', 'ADMIN_ID', 'CHECK_INTERVAL'] and not key.startswith('_'):
            if value.startswith('http'):
                servers[key] = value
    return servers

SERVERS = load_servers()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

class CheckCallback(CallbackData, prefix="check"):
    action: str

async def check_server(session: aiohttp.ClientSession, name: str, url: str) -> Tuple[str, bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    
    Args:
        session: HTTP —Å–µ—Å—Å–∏—è
        name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
        url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        Tuple[str, bool, str]: (–∏–º—è_—Å–µ—Ä–≤–µ—Ä–∞, —É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        timeout = aiohttp.ClientTimeout(total=30)
        async with session.get(url, timeout=timeout) as response:
            text = await response.text()
            
            if response.status == 200 and text.strip() == "OK":
                logger.info(f"–°–µ—Ä–≤–µ—Ä {name} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                return name, True, "OK"
            else:
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {text[:100]}"
                logger.warning(f"–°–µ—Ä–≤–µ—Ä {name}: {error_msg}")
                return name, False, error_msg
                
    except asyncio.TimeoutError:
        error_msg = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        logger.error(f"–°–µ—Ä–≤–µ—Ä {name}: {error_msg}")
        return name, False, error_msg
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        logger.error(f"–°–µ—Ä–≤–µ—Ä {name}: {error_msg}")
        return name, False, error_msg

async def check_all_servers() -> Dict[str, Tuple[bool, str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    
    Returns:
        Dict[str, Tuple[bool, str]]: {–∏–º—è_—Å–µ—Ä–≤–µ—Ä–∞: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)}
    """
    results = {}
    
    async with aiohttp.ClientSession() as session:
        tasks = []
        for name, url in SERVERS.items():
            task = check_server(session, name, url)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        check_results = await asyncio.gather(*tasks)
        
        for name, success, message in check_results:
            results[name] = (success, message)
    
    return results

async def send_alert(server_name: str, error_message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
    try:
        alert_text = f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n" \
                    f"–°–µ—Ä–≤–µ—Ä: <code>{server_name}</code>\n" \
                    f"–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n" \
                    f"–û—à–∏–±–∫–∞: <code>{error_message}</code>\n" \
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=alert_text,
            parse_mode='HTML'
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º {server_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def monitoring_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω—É—Ç")
    logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–µ—Ä–≤–µ—Ä—ã: {list(SERVERS.keys())}")
    
    while True:
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            results = await check_all_servers()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            for server_name, (success, message) in results.items():
                if not success:
                    await send_alert(server_name, message)
            
            # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            await asyncio.sleep(CHECK_INTERVAL * 60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã", callback_data=CheckCallback(action="check").pack())]
    ])
    
    welcome_text = f"ü§ñ <b>XRay Checker Bot</b>\n\n" \
                  f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n"
    
    for server_name in SERVERS.keys():
        welcome_text += f"‚Ä¢ {server_name}\n"
    
    welcome_text += f"\n‚è± –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω—É—Ç"
    
    await message.answer(welcome_text, parse_mode='HTML', reply_markup=keyboard)

@dp.callback_query(CheckCallback.filter())
async def check_callback(callback_query: types.CallbackQuery, callback_data: CheckCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await callback_query.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Ä–≤–µ—Ä—ã...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await callback_query.message.edit_text(
        "üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode='HTML'
    )
    
    try:
        results = await check_all_servers()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n" \
                f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        all_ok = True
        for server_name, (success, message) in results.items():
            if success:
                report += f"‚úÖ <code>{server_name}</code>: OK\n"
            else:
                report += f"‚ùå <code>{server_name}</code>: {message}\n"
                all_ok = False
        
        if all_ok:
            report += f"\nüéâ <b>–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!</b>"
        else:
            report += f"\n‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏</b>"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=CheckCallback(action="check").pack())]
        ])
        
        await loading_message.edit_text(report, parse_mode='HTML', reply_markup=keyboard)
        
    except Exception as e:
        error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n\n" \
                    f"<code>{str(e)}</code>"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=CheckCallback(action="check").pack())]
        ])
        
        await loading_message.edit_text(error_text, parse_mode='HTML', reply_markup=keyboard)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not ADMIN_ID:
            raise ValueError("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not SERVERS:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = f"üöÄ <b>XRay Checker Bot –∑–∞–ø—É—â–µ–Ω</b>\n\n" \
                         f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n"
        
        for server_name in SERVERS.keys():
            startup_message += f"‚Ä¢ {server_name}\n"
        
        startup_message += f"\n‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω—É—Ç"
        
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=startup_message,
            parse_mode='HTML'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        monitoring_task = asyncio.create_task(monitoring_loop())
        polling_task = asyncio.create_task(dp.start_polling(bot))
        
        await asyncio.gather(monitoring_task, polling_task)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
